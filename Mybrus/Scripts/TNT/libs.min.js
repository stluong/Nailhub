var TNT = window.TNT || {}; TNT.Common || (TNT.Common = function (n) { return { Settings: function (t) { return n("body >header#mySettings").find(t) }, ImageError: function (n) { n.onerror = null; n.src = TNT.Common.Settings("input#img-Error").val() }, FormatMoney: function (n, t) { return t + parseInt(n).toFixed(2).replace(/(\d)(?=(\d{3})+\.)/g, "$1,") }, AlertTo: function (t, i, r) { var u = { type: "msgSuccess", href: "", timeOut: 5e3 }, f, e; u = n.extend(!0, u, r); f = ""; e = u.timeOut; u.href !== "" ? (f = "{0}. <a href='{1}' class='clwhite textunderline'>Click for detail<\/a>".format(i, u.href), e = 12e4) : f = i; n("<div class='alert {0} alert-dismissable text-center'><button type='button' class='close' data-dismiss='alert' aria-hidden='true'>×<\/button><strong>Notice!<\/strong> {1}.<\/div>".format(u.type, f)).appendTo(t).delay(e).fadeOut(400, function () { n(this).remove() }) }, Alert: function (t, i) { TNT.Common.AlertTo(n("body>header#topHead"), t, i) }, Dialog: function (t, i, r, u, f, e, o) { function c() { var t = s.find("div.dialog-content"); n.type(i) != "undefined" && i != null && i != "" ? (t.css("display", "block"), t.load(i, r ? r : "", function () { n.type(o) != "undefined" })) : n.type(o) != "undefined" } var s = n("<div class='dialogWrapper dpl-none box-size-content'><div class='dialog-content'><div class='myspinner'><\/div><\/div><\/div>"), h; n.type(t) === InsiiteEnum.String ? (t = n(t), t.find("div.dialogWrapper").length < 1 && t.prepend(s)) : s = t; h = { autoOpen: !1, resizable: !1, title: u ? u : s.attr("title"), height: "auto", width: f ? f : n(window).width() - 100 < 950 ? n(window).width() - 100 : 950, position: ["top", e ? e : 0], modal: !0, create: function () { }, close: function () { s.dialog("destroy") }, open: function () { }, buttons: {} }; s.dialog(h); try { s.dialog("open"); c() } catch (l) { } }, SetDropdownlist: function (t, i, r) { function u(t, i) { i = n.trim(i); i && (n.isNumeric(i) ? t.val(i) : t.find("option").filter(function () { return n.trim(n(this).text()) == i }).attr("selected", !0)) } i.length > 0 && (t = n(t), t.find("option").remove(), n.each(i, function (i, r) { var u = n("<option>", { value: r.Value }).html(r.Text).appendTo(t) }), u(t, r)) } } }(jQuery)); TNT.Service || (TNT.Service = function (n) { function u(n) { if (n) { var u = n.split("=>")[1]; t.Authorization = r.format(u); localStorage.setItem(i, u) } return localStorage.getItem(i) } var r = "Basic {0}", i = "DDAYLAMAXCUARTUI", t = { Authorization: r.format(u()) }; return { Message: { friendly: "An error occured, please try later!", error: "Server returned failure.", failure: "Cannot call the service" }, Headers: function (n) { return t || (t = n) }, Token: function (n) { return u(n) }, TokenClean: function () { localStorage.removeItem(i) }, Success: function (t) { return n.trim(t).indexOf("FAILURE") < 0 ? !0 : !1 }, Failure: function (t) { if (t = n.trim(t), t.indexOf("FAILURE") > -1 && t.indexOf("=>") > -1) { var i = t.split("=>"); if (i.length > 1) return i[1].trim() } return "" }, Call: function (t) { var i = n.ajax(t); return i.error(function () { TNT.Common.Alert(TNT.Service.Message.friendly, { type: "alert-warning" }) }).complete(function () { }), { Done: function (t) { i.success(function (i) { n.trim(i) === "error" ? TNT.Common.Alert(TNT.Service.Message.friendly, { type: "alert-warning" }) : t(i) }) }, Success: function (t, r) { i.success(function (i) { TNT.Service.Success(i) ? n.trim(i) === "error" ? (TNT.Common.Alert(TNT.Service.Message.friendly, { type: "alert-warning" }), r(i)) : t(i) : TNT.Common.Alert(TNT.Service.Message.failure, { type: "alert-warning" }) }) } } }, GCall: function (n, t) { return TNT.Service.Call({ url: n, type: "get", data: t || "" }) }, PCall: function (n, t) { return TNT.Service.Call({ url: n, type: "post", data: t || "" }) }, AGCall: function (n, i) { return TNT.Service.Call({ url: n, type: "get", headers: t, data: i || "" }) }, APCall: function (n, i) { return TNT.Service.Call({ url: n, type: "post", headers: t, data: i || "" }) }, FileUpload: function (n, t) { return TNT.Service.Call({ type: "post", url: n, contentType: !1, processData: !1, data: t }) }, GetPassedParas: function () { for (var t = [], n, r = window.location.href.slice(window.location.href.indexOf("?") + 1).split("&"), i = 0; i < r.length; i++) n = r[i].split("="), t.push(n[0]), t[n[0]] = n[1]; return t } } }(jQuery)); TNT.Stripe || (TNT.Stripe = function (n) { var t, i = "pk_live_qvSXjt5IWP46qmlrSSIWyZkn", r = "luc.huynh78@gmail.com"; return { Checkout: function (u, f) { var s = n(f).parents(n("div#scopeBuy")), h = s.find("input#product_qty").val() || 1, c = s.find("select#ddlSize").val(), o, e; u.quantity = h; u.size = c; o = u.quantity * u.price; e = TNT.Common.Settings("input#shippingCost").val(); o < 30 ? (o = parseFloat(o) + parseFloat(e), e = "${0}".format(e)) : e = "Free"; BootstrapDialog.show({ draggable: !0, size: BootstrapDialog.SIZE_SMALL, title: "Notice", message: n("<div><\/div>").load(TNT.Common.Settings("input#url-Order-Info").val(), { fee: e }), buttons: [{ label: "READY TO PAY", action: function (f) { var h = f.$modalBody.find("input#chkBopCo").is(":checked"), s = f.$modalBody.find("input#txtEmail").val(), e = f.$modalBody.find("textarea#txtShipping"); if (n.trim(e.val()).length > 0) { f.close(); u.description = h ? "Bop co" : ""; u.note = e.val(); t = s ? StripeCheckout.configure({ key: i, image: TNT.Common.Settings("input#img-Mybrus").val(), email: s, token: function (n) { var t = { stripeToken: n.id, stripeEmail: n.email, prod: u }; TNT.Service.PCall(TNT.Common.Settings("input#url-Charge").val(), t).Success(function () { TNT.Common.Alert("Your item will be shipped asap!", { type: "alert-success" }) }) } }) : StripeCheckout.configure({ key: i, image: TNT.Common.Settings("input#img-Mybrus").val(), email: r, token: function (n) { var t = { stripeToken: n.id, stripeEmail: n.email, prod: u }; TNT.Service.PCall(TNT.Common.Settings("input#url-Charge").val(), t).Success(function () { TNT.Common.Alert("Your item will be shipped asap!", { type: "alert-success" }) }) } }); t.open({ name: "MyBrus", description: u.description, amount: o * 100 }); n(window).on("popstate", function () { t.close() }) } else e.tooltip("show") } }, { label: "CANCEL", action: function (n) { n.close() } }] }) }, Checkouts: function (u, f) { var s = n(f), e = s.attr("attr-total"), o = TNT.Common.Settings("input#shippingCost").val(); e < 30 ? (e = parseFloat(e) + parseFloat(o), o = "${0}".format(o)) : o = "Free"; BootstrapDialog.show({ draggable: !0, size: BootstrapDialog.SIZE_SMALL, title: "Notice", message: n("<div><\/div>").load(TNT.Common.Settings("input#url-Order-Info").val()), buttons: [{ label: "READY TO PAY", action: function (f) { var c = f.$modalBody.find("input#chkBopCo").is(":checked") ? "Bop co" : "", h = f.$modalBody.find("input#txtEmail").val(), o = f.$modalBody.find("textarea#txtShipping"); if (n.trim(o.val()).length > 0) { f.close(); s.find("input[name='qty']").each(function (t, i) { u[t].quantity = n(i).val(); u[t].description = c; u[t].note = o.val() }); t = h ? StripeCheckout.configure({ key: i, image: TNT.Common.Settings("input#img-Mybrus").val(), email: h, token: function (n) { var t = { stripeToken: n.id, stripeEmail: n.email, prods: u }; TNT.Service.PCall(TNT.Common.Settings("input#url-Charges").val(), t).Success(function () { TNT.Common.Alert("Your item will be shipped asap!", { type: "alert-success" }) }) } }) : StripeCheckout.configure({ key: i, image: TNT.Common.Settings("input#img-Mybrus").val(), email: r, token: function (n) { var t = { stripeToken: n.id, stripeEmail: n.email, prods: u }; TNT.Service.PCall(TNT.Common.Settings("input#url-Charges").val(), t).Success(function () { TNT.Common.Alert("Your item will be shipped asap!", { type: "alert-success" }) }) } }); t.open({ name: "MyBrus", description: "Shopping cart checkout", amount: e * 100 }); n(window).on("popstate", function () { t.close() }) } else o.tooltip("show") } }, { label: "CANCEL", action: function (n) { n.close() } }] }) } } }(jQuery));
//# sourceMappingURL=sr-libs.min.js.map
